<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Terry&#39;s Blog</title>
  
  <subtitle>Live the life you love</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://terrylovessmiles.github.io/"/>
  <updated>2019-07-25T13:56:52.386Z</updated>
  <id>https://terrylovessmiles.github.io/</id>
  
  <author>
    <name>Terry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springboot+mybatis+generator插件的使用</title>
    <link href="https://terrylovessmiles.github.io/2019/02/05/2019-02-05-springboot+mybatis+generator%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://terrylovessmiles.github.io/2019/02/05/2019-02-05-springboot+mybatis+generator插件的使用/</id>
    <published>2019-02-05T11:42:30.000Z</published>
    <updated>2019-07-25T13:56:52.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-在pom文件中加入以下需要用到的jar包"><a href="#一-在pom文件中加入以下需要用到的jar包" class="headerlink" title="一  在pom文件中加入以下需要用到的jar包"></a>一  在pom文件中加入以下需要用到的jar包</h2><pre><code class="java">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;2.1.3.RELEASE&lt;/version&gt;        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;    &lt;/parent&gt;    &lt;groupId&gt;com.baidu&lt;/groupId&gt;    &lt;artifactId&gt;springboot-demo&lt;/artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;    &lt;name&gt;springboot-demo&lt;/name&gt;    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;    &lt;properties&gt;        &lt;java.version&gt;1.8&lt;/java.version&gt;    &lt;/properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;version&gt;5.1.10&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;            &lt;version&gt;1.2.0&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;            &lt;artifactId&gt;druid&lt;/artifactId&gt;            &lt;version&gt;1.0.29&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;            &lt;/plugin&gt;            &lt;!--mybatis 自动生成类--&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;                &lt;version&gt;1.3.2&lt;/version&gt;                &lt;dependencies&gt;                    &lt;dependency&gt;                        &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;                        &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;                        &lt;version&gt;1.3.2&lt;/version&gt;                    &lt;/dependency&gt;                    &lt;dependency&gt;                        &lt;groupId&gt;mysql&lt;/groupId&gt;                        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;                        &lt;version&gt;5.1.30&lt;/version&gt;                    &lt;/dependency&gt;                &lt;/dependencies&gt;                &lt;executions&gt;                    &lt;execution&gt;                        &lt;id&gt;mybatis generator&lt;/id&gt;                        &lt;phase&gt;package&lt;/phase&gt;                        &lt;goals&gt;                            &lt;goal&gt;generate&lt;/goal&gt;                        &lt;/goals&gt;                    &lt;/execution&gt;                &lt;/executions&gt;                &lt;!--防止反复生成--&gt;                &lt;configuration&gt;                    &lt;!--允许移动生成的文件--&gt;                    &lt;verbose&gt;true&lt;/verbose&gt;                    &lt;!--是否允许自动覆盖文件--&gt;                    &lt;overwrite&gt;true&lt;/overwrite&gt;                    &lt;!--配置文件--&gt;                    &lt;configurationFile&gt;                        src/main/resources/mybatis-generator.xml                    &lt;/configurationFile&gt;                &lt;/configuration&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;&lt;/project&gt;```</code></pre><h2 id="加入两个配置文件：application-properties、mybatis-generator-xml"><a href="#加入两个配置文件：application-properties、mybatis-generator-xml" class="headerlink" title="加入两个配置文件：application.properties、mybatis-generator.xml"></a>加入两个配置文件：application.properties、mybatis-generator.xml</h2><pre><code class="java">application.properties 是springboot默认使用的全局配置文件​```#服务器启动端口server.port=8087#mapper映射xml文件的所在路径mybatis.mapperLocations = classpath:mapping/*.xmlspring.datasource.url=jdbc:mysql://127.0.0.1:3306/springbootdbspring.datasource.username=rootspring.datasource.password=123456#使用druid数据源spring.datasource.type=com.alibaba.druid.pool.DruidDataSourcespring.datasource.driverClassName=com.mysql.jdbc.Driver</code></pre><h2 id="三-mybatis-generator-xml"><a href="#三-mybatis-generator-xml" class="headerlink" title="三 mybatis-generator.xml:"></a>三 mybatis-generator.xml:</h2><pre><code class="java">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt;    &lt;properties resource=&quot;application.properties&quot;&gt;&lt;/properties&gt;    &lt;!--数据库驱动--&gt;    &lt;!--&lt;classPathEntry    location=&quot;mysql-connector-java-5.0.8-bin.jar&quot;/&gt;--&gt;    &lt;context id=&quot;DB2Tables&quot;    targetRuntime=&quot;MyBatis3&quot;&gt;        &lt;commentGenerator&gt;            &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;            &lt;property name=&quot;suppressAllComments&quot; value=&quot;false&quot;/&gt;        &lt;/commentGenerator&gt;        &lt;!--数据库链接地址账号密码--&gt;        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://127.0.0.1:3306/springbootdb&quot; userId=&quot;root&quot; password=&quot;123456&quot;&gt;        &lt;/jdbcConnection&gt;        &lt;javaTypeResolver&gt;            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;        &lt;/javaTypeResolver&gt;        &lt;!--生成Model类存放位置--&gt;        &lt;javaModelGenerator targetPackage=&quot;cn.edu.zut.domin&quot; targetProject=&quot;src/main/java&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;        &lt;/javaModelGenerator&gt;        &lt;!--生成映射文件存放位置--&gt;        &lt;sqlMapGenerator targetPackage=&quot;mapper&quot; targetProject=&quot;src/main/resources&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;        &lt;/sqlMapGenerator&gt;        &lt;!--生成Dao类存放位置--&gt;        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;cn.edu.zut.dao&quot; targetProject=&quot;src/main/java&quot;&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;        &lt;/javaClientGenerator&gt;        &lt;!--生成对应表及类名--&gt;        &lt;table tableName=&quot;book&quot; domainObjectName=&quot;Book&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt; &lt;/table&gt;        &lt;table tableName=&quot;bookuser&quot; domainObjectName=&quot;User&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt; &lt;/table&gt;    &lt;/context&gt;&lt;/generatorConfiguration&gt;</code></pre><h2 id="四-运行插件"><a href="#四-运行插件" class="headerlink" title="四 运行插件"></a>四 运行插件</h2><p>Run→Edit Configurations…，然后选择maven，配置Command line</p><p>Command line：mybatis-generator:generate<br>然后运行这个maven 就可以了</p><h2 id="五-测试"><a href="#五-测试" class="headerlink" title="五 测试"></a>五 测试</h2><pre><code class="java">所有配置完成后我们进行测试:```package cn.edu.zut;import cn.edu.zut.dao.UserMapper;import cn.edu.zut.domin.User;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import javax.annotation.Resource;@MapperScan(&quot;cn.edu.zut.dao&quot;)@SpringBootApplication(scanBasePackages = {&quot;cn.edu.zut&quot;})@RestControllerpublic class BootMybatis02Application {    @Resource   UserMapper userMapper;    @RequestMapping(value = &quot;/&quot;, method = RequestMethod.GET)    public  String home()    {        System.out.println(&quot;hello word!&quot;);        User user = userMapper.selectByPrimaryKey(1);        if (user == null)        {            return &quot;用户对象不存在&quot;;        } else        {            return user.getName();        }    }        public static void main (String[] args){        SpringApplication.run(BootMybatis02Application.class,args);    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-在pom文件中加入以下需要用到的jar包&quot;&gt;&lt;a href=&quot;#一-在pom文件中加入以下需要用到的jar包&quot; class=&quot;headerlink&quot; title=&quot;一  在pom文件中加入以下需要用到的jar包&quot;&gt;&lt;/a&gt;一  在pom文件中加入以下需要用到的
      
    
    </summary>
    
      <category term="SpringBoot" scheme="https://terrylovessmiles.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot学习笔记" scheme="https://terrylovessmiles.github.io/tags/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Springboot+Thymeleaf</title>
    <link href="https://terrylovessmiles.github.io/2018/10/20/web%E5%BC%80%E5%8F%91%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://terrylovessmiles.github.io/2018/10/20/web开发初体验/</id>
    <published>2018-10-20T01:57:13.000Z</published>
    <updated>2019-07-25T13:10:31.801Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center">             <a id="more"></a>  <blockquote class="blockquote-center"><h2 id="一-自动配置原理"><a href="#一-自动配置原理" class="headerlink" title="一 自动配置原理"></a>一 自动配置原理</h2><h2 id="一-这个场景springboot帮我们配置了什么？能不能够修改？能修改那些配置？能不能扩展？"><a href="#一-这个场景springboot帮我们配置了什么？能不能够修改？能修改那些配置？能不能扩展？" class="headerlink" title="一  这个场景springboot帮我们配置了什么？能不能够修改？能修改那些配置？能不能扩展？"></a>一  这个场景springboot帮我们配置了什么？能不能够修改？能修改那些配置？能不能扩展？</h2><pre><code class="java">xxxAutoconfiguration:帮我们给容器中自动配置组件xxxProperties:配置类来封装配置的内容</code></pre><h2 id="二-SpringBoot对静态资源的映射规则"><a href="#二-SpringBoot对静态资源的映射规则" class="headerlink" title="二 SpringBoot对静态资源的映射规则"></a>二 SpringBoot对静态资源的映射规则</h2><ol><li><p>所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；</p></li><li><p>“/**” 访问当前项目的任何资源，都去（静态资源的文件夹）找映射</p><pre><code class="java">&quot;classpath:/META‐INF/resources/&quot;,&quot;classpath:/resources/&quot;,&quot;classpath:/static/&quot;, &quot;classpath:/public/&quot; &quot;/&quot;：当前项目的根路径</code></pre><ol start="3"><li>欢迎页； 静态资源文件夹下的所有index.html页面；被”/**”映射；<br>localhost:8080/ 找index页面</li><li>所有的 **/favicon.ico 都是在静态资源文件下找；</li></ol></li></ol><h2 id="三-模板引擎Thymeleaf"><a href="#三-模板引擎Thymeleaf" class="headerlink" title="三 模板引擎Thymeleaf"></a>三 模板引擎Thymeleaf</h2><p>jsp/Thymeleaf/FreeMaker/VeloCity</p><h3 id="1-引入Thymeleaf"><a href="#1-引入Thymeleaf" class="headerlink" title="1. 引入Thymeleaf"></a>1. 引入Thymeleaf</h3><pre><code class="xml">&lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;    默认2.16        &lt;/dependency&gt;但是需要更新下Thymeleaf版本，添加&lt;properties&gt;        &lt;thymeleaf.version&gt;3.0.9.RELEASE&lt;/thymeleaf.version&gt;        &lt;!‐‐ 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 ‐‐&gt;        &lt;!‐‐ thymeleaf2   layout1‐‐&gt;            &lt;thymeleaf‐layout‐dialect.version&gt;2.2.2&lt;/thymeleaf‐layout‐dialect.version&gt;   &lt;/properties&gt;</code></pre><h3 id="2Thymeleaf使用"><a href="#2Thymeleaf使用" class="headerlink" title="2Thymeleaf使用"></a>2Thymeleaf使用</h3><p><strong>只要我们把HTML页面放在classpath:/templates/xx.html，</strong></p><p><strong>thymeleaf就能自动渲染</strong></p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt; &lt;head&gt;    &lt;meta charset=&quot;UTF‐8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;成功！&lt;/h1&gt;    &lt;!‐‐th:text 将div里面的文本内容设置为 ‐‐&gt;    &lt;div th:text=&quot;${hello}&quot;&gt;这是显示欢迎信息&lt;/div&gt; &lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="mvc的视图解析器-拦截器"><a href="#mvc的视图解析器-拦截器" class="headerlink" title="mvc的视图解析器/拦截器"></a>mvc的视图解析器/拦截器</h2><pre><code class="xml">&lt;mvc: view-controller path=&quot;/hello&quot; view-name=&quot;success&quot;&gt;    &lt;mvc interceptors&gt;        &lt;mvc: interceptor&gt;        &lt;mvc :mapping path=&quot;/hello&quot;&gt;            &lt;bean&gt;&lt;/bean&gt;        &lt;/mvc: interceptor&gt;    &lt;/mvc interceptors&gt;</code></pre></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://terrylovessmiles.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot学习笔记" scheme="https://terrylovessmiles.github.io/tags/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+Slf4</title>
    <link href="https://terrylovessmiles.github.io/2018/10/14/%E6%97%A5%E5%BF%97/"/>
    <id>https://terrylovessmiles.github.io/2018/10/14/日志/</id>
    <published>2018-10-14T12:13:59.000Z</published>
    <updated>2019-07-25T13:28:31.270Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><a id="more"></a>< blockquote/><h2 id="1-日志框架"><a href="#1-日志框架" class="headerlink" title="1.日志框架"></a>1.日志框架</h2><p><strong>市面上常见的日志框架</strong></p><table><thead><tr><th>日志门面（日志的抽象层）</th><th>日志实现</th></tr></thead><tbody><tr><td><del>JCL</del>        SLF4J             <del>JBOSS-logging</del></td><td>log4j      log4j2     jul      logback</td></tr></tbody></table><p>左边选一个抽象层，右边来选一个实现</p><p>日志门面选SLF4J  </p><p>日志实现选logback</p><p><strong>SpringBoot选用的是SLF4J和Logback</strong></p><h2 id="2-Slf4j"><a href="#2-Slf4j" class="headerlink" title="2. Slf4j"></a>2. Slf4j</h2><h3 id="1-Slf4j的使用"><a href="#1-Slf4j的使用" class="headerlink" title="1. Slf4j的使用"></a>1. Slf4j的使用</h3><p><strong>开发的时候调用的是</strong>日志抽象层SLF4J<strong>里面的方法</strong></p><p><strong>使用的时候给系统里导入slf4j的jar和logback的实现jar</strong></p><pre><code class="java">import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class HelloWorld {  public static void main(String[] args) {    Logger logger = LoggerFactory.getLogger(HelloWorld.class);    logger.info(&quot;Hello World&quot;);  }}</code></pre><p><img src="https://www.slf4j.org/images/concrete-bindings.png" alt="img"> </p><p><strong>深绿色的代表适配层，帮助我们使用除了logback以外的其他的日志实现</strong></p><p>每一个日志的实现框架都有自己的配置文件。</p><p>slf4j同样如此，配置文件还是做成日志实现框架自己本身的配置文件</p><h3 id="2-遗留问题"><a href="#2-遗留问题" class="headerlink" title="2. 遗留问题"></a>2. 遗留问题</h3><p>A系统(slf4j+logback):    其中也用到了Spring（commons-logging）,Hibernate(jboss-logging),Mybatis</p><p><strong>能否把所有的框架统一日志记录，即使是别的框架也统一使用slf4j+logback呢</strong></p><p><img src="https://www.slf4j.org/images/legacy.png" alt="img"> </p><p><strong>如何让系统中所有的日志统一到</strong>slf4j：</p><ol><li><p>将系统中其他日志框架先排除出去</p></li><li><p>用中间包来替换原有的日志框架，</p></li><li><p>导入slf4j其他的实现</p></li></ol><h2 id="3-springBoot日志关系"><a href="#3-springBoot日志关系" class="headerlink" title="3.  springBoot日志关系"></a>3.  springBoot日志关系</h2><p>   SpringBoot使用它来做日志功能</p><pre><code class="xml">   &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;         &lt;version&gt;2.0.5.RELEASE&lt;/version&gt;         &lt;scope&gt;compile&lt;/scope&gt;       &lt;/dependency&gt;</code></pre><p>   <strong>SpringBoot日志底层依赖关系</strong></p><p>   <img src="https://haha-1257208827.cos.ap-guangzhou.myqcloud.com/SpringBoot%2Fslf4j.png" alt="slf4j"></p><p>   总结：</p><ol><li><p>SpringBoot的底层也是采用Slf4j+logback的方式来记录日志</p></li><li><p>SpringBoot也把其他日志都替换成了Slf4j</p></li><li><p>中间替换包</p></li><li><p>如果我们要引入其他框架，一定要把这个框架的默认日志依赖移除掉</p><p>​    spring框架使用的是commons-logging;</p></li></ol><p>   <strong>SpringBoot能自动适配所有的日志框架，且底层要使用slf4j+logback的方式来记录日志，引入其他框架的时候，只需要把这个框架依赖的默认日志框架移除掉即可</strong></p><h2 id="4-日志使用"><a href="#4-日志使用" class="headerlink" title="4.日志使用"></a>4.日志使用</h2><h3 id="1-默认配置"><a href="#1-默认配置" class="headerlink" title="1. 默认配置"></a>1. 默认配置</h3><p>   SpringBoot默认帮我们配好了日志</p><pre><code class="java">   public class Springboot03LoggingApplicationTests {       //记录器       Logger logger = LoggerFactory.getLogger(getClass());       @Test       public void contextLoads() {           Logger logger = LoggerFactory.getLogger(getClass());           //日志的级别，由低到高的顺序-----&gt;           //可以调整需要输出得日志级，日志就只会在这个级别以后的高级别生效           logger.trace(&quot;这是trance日志&quot;);           logger.debug(&quot;这是debug信息&quot;);           //SpringBoot默认使用的是info级别           //没有指定级别的就用默认的级别，也叫root级别           logger.info(&quot;这是info日志&quot;);           logger.warn(&quot;这是警告日志&quot;);           logger.error(&quot;这是error日志&quot;);       }       application.properties中可以修改为   logging.level.cn.edu.zut=trace，           就会更改输出的级别了           logging.level.cn.edu.zut=trace</code></pre><pre><code class="xml">   # 生成log日志到指定位置,不指定位置在当前项目下生成   #logging.file=D:\\SpringBoot.log   #logging.file=SpringBoot.log   #在当前磁盘的根路径下创建文件夹，里面使用spring。log作为默认使用文件   logging.path=/Spring/log   #在控制台输出的日志的格式   logging.pattern.console=   #指定文件中日志输出的格式   logging.pattern.file=</code></pre><p>   <strong>默认的logback日志</strong></p><p>   C:\Users\Lenovo.m2\repository\org\springframework\boot\spring-boot\2.0.5.RELEASE\spring-boot-2.0.5.RELEASE.jar!\org\springframework\boot\logging\logback\base.xml</p><pre><code class="xml">   &lt;included&gt;       &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot; /&gt;       &lt;property name=&quot;LOG_FILE&quot; value=&quot;${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}&quot;/&gt;       &lt;include resource=&quot;org/springframework/boot/logging/logback/console-appender.xml&quot; /&gt;       &lt;include resource=&quot;org/springframework/boot/logging/logback/file-appender.xml&quot; /&gt;       &lt;root level=&quot;INFO&quot;&gt;           &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;           &lt;appender-ref ref=&quot;FILE&quot; /&gt;       &lt;/root&gt;   &lt;/included&gt;</code></pre><p>   <strong>起的xml文件名叫</strong></p><p>   logback.xml  ：就直接被日志框架识别了</p><p>   logback-spring.xml:日志框架就不能直接加载日志的配置项，由springBoot解析日志配置，可以使用springboot的高级profile功能</p><blockquote class="blockquote-center"></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://terrylovessmiles.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot学习笔记" scheme="https://terrylovessmiles.github.io/tags/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Yaml+配置类</title>
    <link href="https://terrylovessmiles.github.io/2018/10/14/Yaml-%E9%85%8D%E7%BD%AE%E7%B1%BB/"/>
    <id>https://terrylovessmiles.github.io/2018/10/14/Yaml-配置类/</id>
    <published>2018-10-14T12:13:35.000Z</published>
    <updated>2019-07-25T13:29:33.103Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><a id="more"></a><blockquote class="blockquote-center"><h1 id="一-使用SpringInitializer快速创建SpringBoot项目"><a href="#一-使用SpringInitializer快速创建SpringBoot项目" class="headerlink" title="一 使用SpringInitializer快速创建SpringBoot项目"></a>一 使用SpringInitializer快速创建SpringBoot项目</h1><ul><li>Resources文件夹中目录结构：<ol><li>templates : 保存所有的模板页面；（SpringBoot默认jar包使用嵌入式的Tomcat，默认不支持jsp页面）；可以使用模板引擎（freemarker，thymeleaf）</li><li>application.properties  ： Spring应用的配置文件，可以修改一些默认设置</li></ol></li></ul><h1 id="二配置文件"><a href="#二配置文件" class="headerlink" title="二配置文件"></a>二配置文件</h1><h2 id="1-SpringBoot默认使用一个全局的配置文件，配置的文件名是固定的"><a href="#1-SpringBoot默认使用一个全局的配置文件，配置的文件名是固定的" class="headerlink" title="1 SpringBoot默认使用一个全局的配置文件，配置的文件名是固定的"></a>1 SpringBoot默认使用一个全局的配置文件，配置的文件名是固定的</h2><ul><li>application.properties</li><li>application.yml</li></ul><p>YAML:   是/不是一个标记语言</p><p>标记语言：</p><p>​    以前的配置文件，大多是xxx.xml文件</p><p>​    YAMl： <strong>以数据为中心</strong>，比jsaon，xml更适合配置文件</p><pre><code class="xml">server:    port: 8081</code></pre><p>XMl:</p><pre><code class="xml">&lt;server&gt;    &lt;port&gt;8081&lt;/port&gt;&lt;/server&gt;</code></pre><h2 id="2-YAML语法"><a href="#2-YAML语法" class="headerlink" title="2 YAML语法"></a>2 YAML语法</h2><ol><li><p><strong>基本语法</strong></p><p>k:  v  表示一对键值对（空格必须有）</p><p>以空格的缩进来控制层级关系；只要左对齐的一列数据都是同一个层级的</p><pre><code class="xml">server:     port: 8081     path: /hello</code></pre><p>属性和值也是大小写敏感</p></li><li><p><strong>值的写法</strong></p><p><strong>字面量：普通的值（数字，字符串，布尔）</strong></p><p>k:  v    字面量直接写</p><p>​    字符串默认不需要加“”和‘’</p><p>​    “  ”：不会转义字符串里面的特殊字符； 特殊字符会作为本身想表示的意思</p><p>​    name:  “zhangsan \n  lisi”   输出  ：zhangsan  换行  lisi</p><p>​    ‘  ‘   :</p><p>​    name:  ‘zhangsan  \n lisi”   输出  ：zhangsan  \n lisi</p></li></ol><p>   <strong>对象,map(属性和值)   （键值对）；</strong></p><p>   k:v  在下一行写对象的属性和值的关系；注意缩进</p><p>   ​    对象还是k:v</p><p>   ​    </p><pre><code class="yml">   friends：           lastName: zhangsan           agea:  20</code></pre><p>   行内写法：</p><pre><code class="yml">   frinends: {lastName: zahngsan,age: 18}</code></pre><p>   <strong>数据（list，Set）；</strong></p><p>   ​    用-值表示数组中的一个元素</p><pre><code class="yml">   pets:       - cat       - dog       - pig</code></pre><p>   行内写法</p><pre><code class="yml">   pets: [cat,dog,pig]</code></pre><h2 id="3-Value（）获取值和-ConfigurationProperties-获取值区别"><a href="#3-Value（）获取值和-ConfigurationProperties-获取值区别" class="headerlink" title="3 @Value（）获取值和@ConfigurationProperties()获取值区别"></a>3 @Value（）获取值和@ConfigurationProperties()获取值区别</h2><table><thead><tr><th></th><th>@ConfigurationProperties()</th><th>@Value（）</th></tr></thead><tbody><tr><td>功能上</td><td>批量注入配置文件中的属性（prefix=“ ”）</td><td>一个个指定</td></tr><tr><td>松散语法（lastName/last-Name）</td><td>支持</td><td>不支持</td></tr><tr><td><strong>spEl</strong></td><td>不支持</td><td><strong>支持</strong></td></tr><tr><td>JSR303校验</td><td>支持</td><td>不支持</td></tr><tr><td><strong>复杂类型封装</strong>（Map、list）</td><td>支持</td><td>不支持</td></tr></tbody></table><p>spEl语法：(Spring表达式语言) 例</p><pre><code class="xml">&lt;bean class=&quot;person&quot;&gt;    &lt;property name=&quot;lastName&quot; value=&quot;字面量/$(key)从环境变量，配置文件中获取值/#{spEL}&quot;&gt;    &lt;/property&gt;&lt;/bean&gt;</code></pre><p>JSR303校验； 例</p><pre><code class="java">@Validatedpublic class Person {    //lastName必须填成邮箱格式    @Email    private String lastName;</code></pre><h2 id="3-1总结："><a href="#3-1总结：" class="headerlink" title="3.1总结："></a>3.1总结：</h2><p>​        <strong><strong>如果只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value（）</strong></strong></p><p>​        例</p><pre><code class="java">@RestControllerpublic class HelloController {    @Value(&quot;${person.lastName}&quot;)    private String name;    @RequestMapping(&quot;/hello&quot;)    public String sayHello(){        return &quot;Hello&quot;+name;    }}</code></pre><p>​        <strong><strong>如果我们专门编写了javabean来和配置文件映射（用数据库了），就直接使用@ConfigurationProperties</strong></strong></p><p>​        </p><h2 id="4-PropertySource和-ImportSource"><a href="#4-PropertySource和-ImportSource" class="headerlink" title="4. @PropertySource和@ImportSource"></a>4. @PropertySource和@ImportSource</h2><p><strong>@PropertySource：加载指定的配置文件</strong>(把指定的配置文件内容提取出来，新建一个person.properties)</p><pre><code class="java">@PropertySource(value = {&quot;classpath:person.properties&quot;})@Component@ConfigurationProperties(prefix = &quot;person&quot;)//@Validatedpublic class Person {</code></pre><p>​        </p><p><strong>@imporResource： 导入Spring的配置文件，让配置文件里的内容生效</strong></p><p>SpringBoot里面没有Spring的配置文件，我们自己编写的配置文件beans.xml也不能自动识别</p><p>想让spring的配置文件生效，加载进来；  <strong>@imporResource</strong> 标注在<strong>主配置类</strong>上</p><pre><code class="java">@ImportResource(locations = {&quot;classpath:beans.xml&quot;})@SpringBootApplicationpublic class Springboot03Application {    public static void main(String[] args) {        SpringApplication.run(Springboot03Application.class, args);    }    功能：导入Spring的配置文件让其生效</code></pre><p><strong>然而不推荐使用，SpringBoot推荐给容器中添加组件的方式是使用全注解的方式</strong></p><pre><code class="xml">以前的Spring配置文件&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;bean id=&quot;HelloService&quot; class=&quot;cn.edu.zut.service.HelloService&quot;&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><h2 id="5配置类-Spring配置文件"><a href="#5配置类-Spring配置文件" class="headerlink" title="5配置类======Spring配置文件"></a>5配置类======Spring配置文件</h2><p>用@bean</p><pre><code class="java">/*指明当前类是一个配置类，替代之前的Spring配置文件在配置文件中使用&lt;bean&gt;&lt;/bean&gt;标签添加组件*/@Configurationpublic class MyConfig {    //将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名    @Bean    &lt;&lt;---------------------------------    public HelloService helloService(){        System.out.println(&quot;配置类@Bean给容器中添加组件了&quot;);        return  new HelloService();    }}</code></pre><h2 id="6-配置文件占位符"><a href="#6-配置文件占位符" class="headerlink" title="6 配置文件占位符"></a>6 配置文件占位符</h2><pre><code class="pro">person.lastName=张三${random.uuid}person.age=${random.int}person.dog.name=${person.hello:hello}_dog  拼接字符串，占位符获取之前配置的值，若果没有，用：指定默认值</code></pre><h2 id="7-profile"><a href="#7-profile" class="headerlink" title="7 profile"></a>7 profile</h2><h3 id="7-1-多Profile文件"><a href="#7-1-多Profile文件" class="headerlink" title="7.1 多Profile文件"></a>7.1 多Profile文件</h3><p>​    例如：又新建了application-dev.properties，application-produce.properties，分别指定了不同的端口号</p><p>​    我们在主配置文件编写的时候，文件名可以是application-{profile}.properties/yml</p><p>​    默认使用application.properties的配置</p><h3 id="7-2-yml支持多文档块形式"><a href="#7-2-yml支持多文档块形式" class="headerlink" title="7.2 yml支持多文档块形式"></a>7.2 yml支持多文档块形式</h3><pre><code class="yml">server:  port: 8081spring:  profiles:    active: produce---server:  port: 8082spring:  profiles: produce---server:  port: 8083spring:  profiles: dev</code></pre><h3 id="7-3激活指定Profile"><a href="#7-3激活指定Profile" class="headerlink" title="7.3激活指定Profile"></a>7.3激活指定Profile</h3><ol><li><p>在默认配置文件application.properties中指定要激活哪个配置</p><p>例 <code>spring.profiles.active=produce</code></p><ol><li>命令行</li></ol><p><code>--spring.profiles.active=produce</code></p></li></ol><h2 id="8-自动配置"><a href="#8-自动配置" class="headerlink" title="8  自动配置"></a>8  自动配置</h2><h2 id="配置文件能配置的属性"><a href="#配置文件能配置的属性" class="headerlink" title="配置文件能配置的属性"></a>配置文件能配置的属性</h2><p><strong>spring官网最后一章附录   commom applictions</strong></p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://terrylovessmiles.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot学习笔记" scheme="https://terrylovessmiles.github.io/tags/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo更换电脑</title>
    <link href="https://terrylovessmiles.github.io/2018/09/05/Hexo%E6%9B%B4%E6%8D%A2%E7%94%B5%E8%84%91/"/>
    <id>https://terrylovessmiles.github.io/2018/09/05/Hexo更换电脑/</id>
    <published>2018-09-05T14:20:34.000Z</published>
    <updated>2019-07-25T13:42:25.475Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><a id="more"></a><blockquote class="blockquote-center">#   前言： Hexo博客源文件放在本地，更换电脑怎么更新博客？<h1 id="可以上传到github，创建分支，换电脑后克隆下来，也可以按照本文所说方法"><a href="#可以上传到github，创建分支，换电脑后克隆下来，也可以按照本文所说方法" class="headerlink" title="可以上传到github，创建分支，换电脑后克隆下来，也可以按照本文所说方法"></a>可以上传到github，创建分支，换电脑后克隆下来，也可以按照本文所说方法</h1><h2 id="1-将你原来电脑上已经配置好并生成的hexo目录拷到新电脑上，无需拷全部，只拷如下几个目录："><a href="#1-将你原来电脑上已经配置好并生成的hexo目录拷到新电脑上，无需拷全部，只拷如下几个目录：" class="headerlink" title="1.将你原来电脑上已经配置好并生成的hexo目录拷到新电脑上，无需拷全部，只拷如下几个目录："></a>1.将你原来电脑上已经配置好并生成的hexo目录拷到新电脑上，无需拷全部，只拷如下几个目录：</h2><pre><code class="xml"> _config.yml package.json scaffolds/ source/ themes/</code></pre><p>将这些目录放到一个目录下，如：hexo／</p><h2 id="2-在你的新电脑上首先配置hexo环境：安装Node-js"><a href="#2-在你的新电脑上首先配置hexo环境：安装Node-js" class="headerlink" title="2.在你的新电脑上首先配置hexo环境：安装Node.js"></a>2.在你的新电脑上首先配置hexo环境：安装Node.js</h2><h2 id="3-安装hexo，执行命令："><a href="#3-安装hexo，执行命令：" class="headerlink" title="3.安装hexo，执行命令："></a>3.安装hexo，执行命令：</h2><pre><code class="html"> npm install -g hexo</code></pre><h2 id="4-安装好之后，进入hexo／目录"><a href="#4-安装好之后，进入hexo／目录" class="headerlink" title="4.安装好之后，进入hexo／目录"></a>4.安装好之后，进入hexo／目录</h2><h2 id="5-模块安装，执行命令："><a href="#5-模块安装，执行命令：" class="headerlink" title="5.模块安装，执行命令："></a>5.模块安装，执行命令：</h2><pre><code class="html"> npm install npm install hexo-deployer-git --save npm install hexo-generator-feed --save npm install hexo-generator-sitemap --save</code></pre><h2 id="6-部署，执行命令："><a href="#6-部署，执行命令：" class="headerlink" title="6.部署，执行命令："></a>6.部署，执行命令：</h2><pre><code class="html"> 　hexo g   hexo deploy</code></pre></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://terrylovessmiles.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo优化" scheme="https://terrylovessmiles.github.io/tags/Hexo%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记-Helloworld</title>
    <link href="https://terrylovessmiles.github.io/2018/09/05/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Helloworld/"/>
    <id>https://terrylovessmiles.github.io/2018/09/05/SpringBoot学习笔记-Helloworld/</id>
    <published>2018-09-05T14:02:38.000Z</published>
    <updated>2019-02-19T11:37:15.292Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><h1 id="HelloWorld探究"><a href="#HelloWorld探究" class="headerlink" title="HelloWorld探究"></a>HelloWorld探究</h1><blockquote class="blockquote-center"><p># </p><h2 id="前言-SpringBoot学习笔记，仅为记录之用，理解不当之处尽情指出"><a href="#前言-SpringBoot学习笔记，仅为记录之用，理解不当之处尽情指出" class="headerlink" title="前言:  SpringBoot学习笔记，仅为记录之用，理解不当之处尽情指出"></a>前言:  SpringBoot学习笔记，仅为记录之用，理解不当之处尽情指出</h2><a id="more"></a><p>Spring官网： </p><p>ctrl +home  首页</p><p>ctrl+f  查找 starters</p><h2 id="1-Pom文件"><a href="#1-Pom文件" class="headerlink" title="1. Pom文件"></a>1. Pom文件</h2><h3 id="1-父项目"><a href="#1-父项目" class="headerlink" title="1.  父项目"></a>1.  父项目</h3><pre><code class="xml">&lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;2.0.3.RELEASE&lt;/version&gt;    &lt;/parent&gt;他的父项目是&lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;        &lt;version&gt;2.0.3.RELEASE&lt;/version&gt;        &lt;relativePath&gt;../../spring-boot-dependencies&lt;/relativePath&gt;    &lt;/parent&gt;他来真正管理Spring Boot应用里的所有依赖版本</code></pre><p>Spring Boot的版本仲裁中心</p><p>以后我们导入依赖默认是不需要写版本（没有在dependencies里面管理的自然需要写版本号）</p><h3 id="2-导入的依赖"><a href="#2-导入的依赖" class="headerlink" title="2. 导入的依赖"></a>2. 导入的依赖</h3><pre><code class="xml">&lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;</code></pre><p><strong>spring-boot-starter</strong>-web</p><p>spring-boot-starter :SpringBoot场景启动器；帮我们导入了web模块正常运行所依赖的组件</p><p>SpringBoot将所有的功能场景都抽取出来，做成一个个的starters（启动器）。只需要在项目里导入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p><h2 id="2-主程序类，主入口类"><a href="#2-主程序类，主入口类" class="headerlink" title="2. 主程序类，主入口类"></a>2. 主程序类，主入口类</h2><pre><code class="java">import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;/** @SpringBootApplication   标注这是一个主程序类。说明这是一个springboot应用* */@SpringBootApplicationpublic class HelloWorldMainApplication {    public static void main(String[] args) {        //Spring应用启动起来        SpringApplication.run(HelloWorldMainApplication.class,args);    }}</code></pre><p><strong>2.1</strong>     <strong>@SpringBootApplication</strong>  : 标注在某个类上，说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用</p><pre><code class="java">@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@SpringBootConfiguration@EnableAutoConfiguration@ComponentScan(excludeFilters = {      @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })public @interface SpringBootApplication {</code></pre><p>一直往注解里面点</p><p><strong>2.1.1</strong>   <strong>@SpringBootConfiguration</strong>： 标注在某个类上，表示这是一个Spring Boot的配置类——-》SpringBoot定义的注解</p><p><strong>Configuration</strong>： 配置类上来标注这个注解——》spring定义的注解</p><p>配置类—-配置文件</p><p>@<strong>Component</strong>：说明配置类也是容器中的一个组件</p><p><strong>2.1.2</strong>@<strong>EnableAutoConfiguration</strong> 开启自动配置功能</p><p>​    以前需要配置的东西，SpringBoot帮我们自动配置</p><p>@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能，这样自动配置功能才能生效</p><pre><code class="java">@AutoConfigurationPackage@Import(AutoConfigurationImportSelector.class)public @interface EnableAutoConfiguration {</code></pre><p><strong>2.1.2.1 <strong>AutoConfigurationPackage</strong></strong>：自动配置包</p><p><strong>2.1.2.2</strong>@Import(AutoConfigurationImportSelector.class):**</p><p>Spring的底层注解@import，给容器中导入一个组件；导入的组件由AutoConfigurationImportSelector.class</p><p>再进入这个class</p><pre><code>register(registry, new PackageImport(metadata).getPackageName());</code></pre><p>在这一行打断点调试，右键Evaluate发现会得到主配置包名</p><p><strong>说明 AutoConfigurationPackage：作用是将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器</strong></p><p><strong>2.1.2.2</strong>@Import(AutoConfigurationImportSelector.class详解</p><p>给容器中导入组件？</p><p>导入哪些组件的选择器</p><p>将所有需要导入的组件以全类名的方式返回；这些组件机会返回到容器·中</p><p>会给容器中导入非常多的自动配置类（XXAutoConfigration）;就是给容器中导入这个场景需要的所有组件，并配置好这些组件</p><p>有了自动配置类，就免去了手动编写配置，注入功能组件等工作</p><p>@SpringBootApplication–&gt;@EnableAutoConfiguration-&gt;@Import(AutoConfigurationImportSelector.class)—-&gt;</p><pre><code class="java">List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,      attributes);</code></pre><p>getCandidateConfigurations—-&gt;SpringFactoriesLoader.loadFactoryNames(      getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());</p><p>@EnableAutoConfiguration-&gt;@Import(AutoConfigurationImportSelector.class)—-&gt;</p><pre><code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,      attributes);</code></pre><p>–&gt;getCandidateConfigurations–&gt;loadFactoryNames</p><p>同页有个META-INF/spring.factories”) </p><p><strong>SpringBoot启动的时候从META-INF/spring.factories”中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效了，给我们进行自动配置工作，以前我们需要自己配置的东西，自动配置类全都帮我们配置了。</strong></p><p><strong>所有的配置类都放在springbootAutoConfigurer包下了</strong>，</p><p>J2EE的整体整合解决方案和自动配置都在</p><p>spring-boot-autoconfigure-2.0.3.RELEASE.jar里了</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;

&lt;h1 id=&quot;HelloWorld探究&quot;&gt;&lt;a href=&quot;#HelloWorld探究&quot; class=&quot;headerlink&quot; title=&quot;HelloWorld探究&quot;&gt;&lt;/a&gt;HelloWorld探究&lt;/h1&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;

&lt;p&gt;# &lt;/p&gt;
&lt;h2 id=&quot;前言-SpringBoot学习笔记，仅为记录之用，理解不当之处尽情指出&quot;&gt;&lt;a href=&quot;#前言-SpringBoot学习笔记，仅为记录之用，理解不当之处尽情指出&quot; class=&quot;headerlink&quot; title=&quot;前言:  SpringBoot学习笔记，仅为记录之用，理解不当之处尽情指出&quot;&gt;&lt;/a&gt;前言:  SpringBoot学习笔记，仅为记录之用，理解不当之处尽情指出&lt;/h2&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="https://terrylovessmiles.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot学习笔记" scheme="https://terrylovessmiles.github.io/tags/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Git&amp;GitHub从安装到使用</title>
    <link href="https://terrylovessmiles.github.io/2018/08/09/Git%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://terrylovessmiles.github.io/2018/08/09/Git的安装与使用/</id>
    <published>2018-08-09T06:00:36.000Z</published>
    <updated>2019-07-25T13:31:47.101Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><a id="more"></a></blockquote><h2 id="一-小白安装"><a href="#一-小白安装" class="headerlink" title="一   小白安装"></a>一   小白安装</h2><h3 id="Terry和你一起从新手出发-Git世界探索之路从现在开始"><a href="#Terry和你一起从新手出发-Git世界探索之路从现在开始" class="headerlink" title="Terry和你一起从新手出发,Git世界探索之路从现在开始"></a>Terry和你一起从新手出发,Git世界探索之路从现在开始</h3><p>目的：通过git管理GitHub托管项目代码下载：（git是一个软件，分32位，64位）安装：注意这两步，其他的都选next检验：鼠标在桌面右击，出现两个Git Gui here   和Git Bash here ,说明安装成功 <img src="https://cdn.nlark.com/yuque/0/2018/png/97622/1532189530352-31a02344-402b-4dfd-972b-2523a13ce211.png" alt="img"> <img src="https://cdn.nlark.com/yuque/0/2018/png/97622/1532189667051-1da7cff8-9917-4ba4-bb57-5f83273fa3da.png" alt="img"> </p><h2 id="二-Git最核心也是最基础的几个概念"><a href="#二-Git最核心也是最基础的几个概念" class="headerlink" title="二  Git最核心也是最基础的几个概念"></a>二  Git最核心也是最基础的几个概念</h2><h3 id="2-1-Git-工作区域："><a href="#2-1-Git-工作区域：" class="headerlink" title="2.1 Git 工作区域："></a>2.1 Git 工作区域：</h3><p>代码提交流程【3—–》2——–》1】</p><h3 id="1-Git-Repository"><a href="#1-Git-Repository" class="headerlink" title="1   Git Repository"></a>1   Git Repository</h3><p>（Git 仓库）：</p><p>最终确定的文件保存到仓库，成为一个新的版本，并且对他人可见</p><h3 id="2-暂存区-："><a href="#2-暂存区-：" class="headerlink" title="2  暂存区     ："></a>2  暂存区     ：</h3><p>暂存已经修改的文件，最后统一提交到git仓库中</p><h3 id="3-Working-Dictionary"><a href="#3-Working-Dictionary" class="headerlink" title="3 Working Dictionary"></a>3 Working Dictionary</h3><p> (工作区）  :</p><p>添加，编辑，修改等动作</p><h2 id="2-2-不同区的来回跑"><a href="#2-2-不同区的来回跑" class="headerlink" title="2.2 不同区的来回跑"></a>2.2 不同区的来回跑</h2><h3 id="2-2-1工作区—–》暂存区"><a href="#2-2-1工作区—–》暂存区" class="headerlink" title="2.2.1工作区—–》暂存区"></a>2.2.1工作区—–》暂存区</h3><p>git status                                               （查看文件在哪个区）<br>git add hello.java</p><h3 id="2-2-2暂存区——》仓库"><a href="#2-2-2暂存区——》仓库" class="headerlink" title="2.2.2暂存区——》仓库"></a>2.2.2暂存区——》仓库</h3><p>git status<br>git commit -m “提交描述”</p><p>仓库<br>git  status</p><h2 id="三-Git在本地的操作"><a href="#三-Git在本地的操作" class="headerlink" title="三   Git在本地的操作"></a>三   Git在本地的操作</h2><h3 id="3-1-基本信息设置"><a href="#3-1-基本信息设置" class="headerlink" title="3.1  基本信息设置"></a>3.1  基本信息设置</h3><p>用户名和邮箱是唯一的，当你fork一个项目，点进去查看时，会看到最近提交Pull Requests的人的信息，写错了就是别人了<br>设置用户名<br>git config –global user.name ‘TerryLovesSmiles’<br>设置邮箱<br>git config –global user.email ‘1164402695@qq.com’<br>注意： 该设置在GitHub主页显示谁提交了该文件</p><h3 id="3-2-初始化一个新的Git仓库"><a href="#3-2-初始化一个新的Git仓库" class="headerlink" title="3.2 初始化一个新的Git仓库"></a>3.2 初始化一个新的Git仓库</h3><p>创建文件夹        mkdir test<br>在文件内初始化git(创建git仓库     cd test        pwd       git init         (会生成.git隐藏文件（存储仓库的本地信息的），看不到的话，就设置下显示隐藏文件喽)</p><h3 id="3-3-向仓库中添加文件"><a href="#3-3-向仓库中添加文件" class="headerlink" title="3.3 向仓库中添加文件"></a>3.3 向仓库中添加文件</h3><p>（工作区—–》暂存区—》git 仓库</p><p>touch a1.java      —–&gt;新建一个文件<br> git add a1.java<br>git commit -m “add a1.java”</p><h3 id="3-4-修改文件"><a href="#3-4-修改文件" class="headerlink" title="3.4  修改文件"></a>3.4  修改文件</h3><p>(修改过后，再次重新add到暂存区,commit)</p><p>vi test  编辑<br>cat test  显示出来文件内的信息<br>git status<br>git add test           暂存区的a1.java是蓝色的<br>git commit test -m “modify test”</p><h3 id="3-5-删除文件"><a href="#3-5-删除文件" class="headerlink" title="3.5 删除文件"></a>3.5 删除文件</h3><p>rm -rf a1.java<br>git rm a1.java<br>git commit a1.java -m “rm a1.java”</p><h2 id="4-Git远程仓库"><a href="#4-Git远程仓库" class="headerlink" title="4 Git远程仓库"></a>4 Git远程仓库</h2><p>###4.1 作用：备份。    实现代码的共享。</p><p> 工作区—add–》暂存区—commit—》Git仓库（本地）–push—–》Git远程仓库</p><p>git congig –list    查看配置信息</p><h3 id="4-2-Git克隆"><a href="#4-2-Git克隆" class="headerlink" title="4.2  Git克隆"></a>4.2  Git克隆</h3><p>目的   将远程仓库（github对应的项目）复制到本地<br>代码 ：  git clone 仓库地址<br>…….<br>git push   (会报错    即让你输入用户名和密码)</p><p>办法<br>将  [remote “origin”]<br>​    url = <a href="https://github.com/用户名/仓库名.git" target="_blank" rel="noopener">https://github.com/用户名/仓库名.git</a><br>改为  [remote “origin”]<br>​    url = https://用户名:密码@github.com/用户名/仓库名.git</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;
    
    </summary>
    
      <category term="Git&amp;GitHub" scheme="https://terrylovessmiles.github.io/categories/Git-GitHub/"/>
    
    
      <category term="Git小白篇" scheme="https://terrylovessmiles.github.io/tags/Git%E5%B0%8F%E7%99%BD%E7%AF%87/"/>
    
  </entry>
  
  <entry>
    <title>Hexo个性优化大全</title>
    <link href="https://terrylovessmiles.github.io/2018/08/09/Hexo%E4%B8%AA%E6%80%A7%E4%BC%98%E5%8C%96%E5%A4%A7%E5%85%A8/"/>
    <id>https://terrylovessmiles.github.io/2018/08/09/Hexo个性优化大全/</id>
    <published>2018-08-09T05:23:00.000Z</published>
    <updated>2019-07-25T13:33:29.029Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><a id="more"></a>< blockquote/>## 万丈高楼平地起，昨天我们把Hexo博客搭成了自己的小窝，那么今天！！！<p>Terry告诉你：史上最全的next主题优化教程来了！</p><p>来吧！和Terry一起把Hexo从小木屋搭成小洋楼！！！</p><h2 id="第一步，基本功能的完善"><a href="#第一步，基本功能的完善" class="headerlink" title="第一步，基本功能的完善"></a>第一步，基本功能的完善</h2><p>来Next的使用中文官网，照着做，一步一步来，没有比这更详细的基础搭配了</p><p>[Next使用文档]<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a>:</p><h2 id="第二步，个性化优化"><a href="#第二步，个性化优化" class="headerlink" title="第二步，个性化优化"></a>第二步，个性化优化</h2><p>这位老哥的Hexo优化博客，被网上疯狂转载，我的博客优化70%基本都来源于这篇博客</p><p><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">超详细进阶优化</a></p><h2 id="第三步-，超全的进阶优化"><a href="#第三步-，超全的进阶优化" class="headerlink" title="第三步 ，超全的进阶优化"></a>第三步 ，超全的进阶优化</h2><p>你再也不用费心思到处找了，都在这啦！！！</p><ol><li>看到文章左边的分享按钮了吗？<a href="https://asdfv1929.github.io/2018/05/25/baidu-share/" target="_blank" rel="noopener">他来源于这</a></li><li>看到文章下边的评论系统了吗？<a href="https://blog.csdn.net/blue_zy/article/details/79071414" target="_blank" rel="noopener">你可以参考这</a></li><li>看到Hexo左下角的音乐播放了吗？<a href="https://asdfv1929.github.io/2018/05/26/next-add-music/" target="_blank" rel="noopener">来。兄dei看这</a></li><li>主页文章，能我点阅读全文再展开吗？<a href="https://blog.csdn.net/ganzhilin520/article/details/79047988" target="_blank" rel="noopener">嘿嘿，可以呀</a></li><li>背景图片看起来，哎呀，不错吆！<a href="https://ihaoming.top/archives/d0564105.html#more" target="_blank" rel="noopener">来这</a></li><li>Hexo-admin后台管理，任何地方都可以更新博客了<a href="https://www.cnblogs.com/xingyunblog/p/8681205.html" target="_blank" rel="noopener">来吧</a></li></ol><h1 id="第四步-兄dei们，你们看着办吧"><a href="#第四步-兄dei们，你们看着办吧" class="headerlink" title="第四步  兄dei们，你们看着办吧"></a>第四步  兄dei们，你们看着办吧</h1><p>Terry利用闲暇基本所有时间整理了三天，现在全在这了，空荡荡的看完就走，你的良心不会痛吗。。。（微笑脸）</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://terrylovessmiles.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo优化" scheme="https://terrylovessmiles.github.io/tags/Hexo%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitPages--从0搭建，再也不羡慕别人了！</title>
    <link href="https://terrylovessmiles.github.io/2018/08/08/Hexo-GitPages-%E4%BB%8E0%E6%90%AD%E5%BB%BA%E5%88%B0%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>https://terrylovessmiles.github.io/2018/08/08/Hexo-GitPages-从0搭建到基本配置/</id>
    <published>2018-08-08T07:59:34.000Z</published>
    <updated>2019-07-25T13:38:01.027Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><a id="more"></a><blockquote class="blockquote-center"><h3 id="为什么会想到要自己搭博客呢？"><a href="#为什么会想到要自己搭博客呢？" class="headerlink" title="为什么会想到要自己搭博客呢？"></a>为什么会想到要自己搭博客呢？</h3><p>  一方面一直对传说中的自己搭一个博客充满了敬佩和好奇，另一方面对别人自己好看的博客真的是羡慕呀！再加上实在无法忍受csdn等老牌博客网站无处不在的广告突袭。。。受不了，那就搭喽！</p><h3 id="搭建心得"><a href="#搭建心得" class="headerlink" title="搭建心得"></a>搭建心得</h3><p>   搭的时候，心态初期感觉难如登天，因为教程太多了，有些常识大佬不提，可对自己来说，那个真的不是常识呀！QAQ 。。。老是报各种错误。。<br>   心态中后期，发现报的错都是普遍的常见错。。。网上解决方法太多了，真是爱死度娘了<br>   好了，话不多说，正式开始<br>​    </p><h2 id="二-用Hexo在本地搭建一个博客"><a href="#二-用Hexo在本地搭建一个博客" class="headerlink" title="二  用Hexo在本地搭建一个博客"></a>二  用Hexo在本地搭建一个博客</h2><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>   1.下载安装nodejs</p><pre><code>  http://nodejs.cn/ 傻瓜式安装  2. 下载安装git  https://git-scm.com/downloads 傻瓜式安装  3. 在gitBash命令行使用npm安装Hexo      npm install -g hexo-cli     //在gitBash命令里</code></pre><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>   1.在桌面新建个文件夹blog，在GitBash里进入这个文件夹,输入</p><pre><code>注意：blog是自己建的空白项目文件名       hexo i blog //init的缩写        cd blog //切换到站点根目录       hexo g //generetor的缩写       hexo s //server的缩写  2.  打开浏览器输入localhost:4000查看：</code></pre><p>  <img src="https://note.youdao.com/yws/api/personal/file/C808C8261FE2459D9B925CEF556BB83B?method=download&shareKey=6cefff581dd31aed946d8753f17599be" alt="image"></p><p>这个是Hexo的默认博客主题。看到这个说明在本地已经搭建成功了</p><h3 id="选择主题-Next"><a href="#选择主题-Next" class="headerlink" title="选择主题-Next"></a>选择主题-Next</h3><ol><li>在站点根目录输入</li></ol><pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></pre><ol start="2"><li>完成后，打开站点配置文件， 找到theme 字段，把landscape更改为next</li><li>在终端输入<pre><code>hexo clean  //清除缓存hexo g  //重新生成代码hexo s  //部署到本地</code></pre></li></ol><p>//然后打开浏览器访问 localhost:4000 查看效果</p><pre><code>![image](https://note.youdao.com/yws/api/personal/file/C808C8261FE2459D9B925CEF556BB83B?method=download&amp;shareKey=6cefff581dd31aed946d8753f17599be)nexT主题有三种选择，这个只是最简洁的一种，我们选择最好看的那个。Muse -默认Scheme，这是NexT最初的版本，黑白主调，大量留白Mist - Muse的紧凑版本，整洁有序的单栏外观Pisces -双栏Scheme，小家碧玉似的清新4.  配置nexTctrl+f 搜素scheme , 选择pisces然后重新clean，generator，查看效果:![image](https://note.youdao.com/yws/api/personal/file/FB34B886E1D44111A1210ABDD1790D89?method=download&amp;shareKey=7bbef245bcf4d31f0eb276512107de7c)## 三 将本地博客上传到GitHub因为我们想要的是通过网址访问，所以接下来还要搭到GitHub上具体的可以看[这个博客](https://blog.csdn.net/Hoshea_chx/article/details/78826689)## 四 注意！！！在修改Hexo的站点文件时冒号的后面一定一定一定要有一个空格！！（大坑）## 五 发布你的第一篇博客根目录下输入：</code></pre><p>hexo new “postName”<br> //hexo n 也可以<br> //你自己的博客名称，名为postName.md的文件会建在目<br> //录/blog/source/_posts下。</p><p>文章编辑完成后，终端在根目录文件夹下，执行如下命令来发布:</p><p>hexo g //生成静态页面<br>hexo d //发布<br>```</p><h2 id="六-后记"><a href="#六-后记" class="headerlink" title="六 后记"></a>六 后记</h2><p>这个只是最简单的博客的搭建，相当于盖房子。盖了一个小木屋，成长为参天大树还需要进一步个性化配置</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://terrylovessmiles.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo搭建" scheme="https://terrylovessmiles.github.io/tags/Hexo%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
